AWSTemplateFormatVersion: '2010-09-09'
Description: CodePipeline and CodeBuild for CI/CD of lambda@edge - Liam Raven - 25/11/2020

Parameters:
  ProjectName:
    Description: IMPORTANT! Must be consistent throughout all cloudformation deployments. eg. waterproofjack
    Type: String
  GitHubUser:
    Type: String
    Description: GitHub User
  GitHubOriginRequestLambdaRepo:
    Type: String
    Description: GitHub Lambda@edge Repo to pull from. Only the Name. not the URL
  GitHubOriginRequestLambdaBranch:
    Type: String
    Description: GitHub Branch
    Default: "aws-deployment"
  GitHubOriginResponseLambdaRepo:
    Type: String
    Description: GitHub Lambda@edge Repo to pull from. Only the Name. not the URL
  GitHubOriginResponseLambdaBranch:
    Type: String
    Description: GitHub Branch
    Default: "aws-deployment"
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Secret. It might look something like 9b189a1654643522561f7b3ebd44a1531a4287af OAuthToken with access to Repo. Go to https://github.com/settings/tokens
  BuildType:
    Type: String
    Default: "LINUX_CONTAINER"
    Description: The build container type to use for building the app
  BuildComputeType:
    Type: String
    Default: "BUILD_GENERAL1_SMALL"
    Description: The build compute type to use for building the app. Go to https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html
  BuildImage:
    Type: String
    Default: "aws/codebuild/standard:3.0"
    Description: The build image to use for building the app

Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: buildHostingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
                - logs:DescribeLogStreams
                Resource: "arn:aws:logs:*:*:*"
                Effect: Allow
              - Action:
                - kms:GenerateDataKey*
                - kms:Encrypt
                - kms:Decrypt
                Resource: "*"
                Effect: Allow
              - Action:
                - secretsmanager:GetSecretValue
                Effect: Allow
                Resource: "*"
              - Action:
                - s3:DeleteObject
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:GetObject
                - s3:GetObjectVersion
                Effect: Allow
                Resource: "*"
              - Action:
                - s3:GetAccessPoint
                - s3:GetAccountPublicAccessBlock
                - s3:ListAccessPoints
                - s3:ListJobs
                Resource: "*"
                Effect: Allow
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: codepipeline-service
          PolicyDocument:
            Statement:
              - Action:
                  - codebuild:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource: "*"
                Effect: Allow
              - Action:
                  - s3:PutObject
                Resource:
                  - !GetAtt PipelineBucket.Arn
                Effect: Allow
              - Action:
                  - s3:*
                  - cloudformation:*
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
              - Action:
                - cloudfront:CreateDistribution
                - cloudfront:TagResource
                - cloudfront:UpdateDistribution
                - cloudfront:DeleteDistribution
                - acm:ListCertificates
                - s3:GetBucketAcl
                - s3:PutBucketAcl
                Resource: "*"
                Effect: Allow
            Version: '2012-10-17'
  CloudFormationRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: cloudformation-service
          PolicyDocument:
            Statement:
              - Action:
                  - cloudformation:*
                  - iam:PassRole
                  - iam:getRolePolicy
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:UpdateRole
                  - iam:DeleteRole
                  - iam:DetachRolePolicy
                  - iam:ListRoles
                  - iam:PutRolePolicy
                  - iam:GetRole
                  - iam:DeleteRolePolicy
                  - lambda:*
                  - events:*
                  - logs:*
                  - cloudwatch:*
                  - s3:*
                  - codebuild:*
                  - cloudfront:*
                  - route53:*
                Resource: "*"
                Effect: Allow
            Version: '2012-10-17'

  PipelineBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub ${ProjectName}-hosting-pipeline-bucket

  CodeBuildLambda:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildRole
    Properties:
      Name: !Sub ${ProjectName}-language-region-redirect-codebuild
      Description: Deploy site to S3
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: !Ref BuildType
        ComputeType: !Ref BuildComputeType
        Image: !Ref BuildImage
      TimeoutInMinutes: 10
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 12
              commands:
                - npm install -g yarn
                - export NODE_ENV=production
            build:
              commands:
                - yarn install --production
            post_build:
              commands:
                - eval "$(node -e 'console.log(`rand=$RANDOM`)')"
                - echo "{\"randomnumber\":\"$rand\"}" >> random.json
                - echo Build completed on `date`
          artifacts:
            files:
              - '**/*'

  LambdaEdgePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${ProjectName}-lambda-edge-codepipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              RunOrder: 1
              Name: OriginRequestLambdaSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubOriginRequestLambdaRepo
                Branch: !Ref GitHubOriginRequestLambdaBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceOriginRequestLambdaOutput
            - InputArtifacts: []
              RunOrder: 1
              Name: OriginResponseLambdaSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubOriginResponseLambdaRepo
                Branch: !Ref GitHubOriginResponseLambdaBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: SourceOriginResponseLambdaOutput
        - Name: LambdaBuild
          Actions:
            - Name: BuildOriginRequestLambda
              RunOrder: 2
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildLambda
              InputArtifacts:
                - Name: SourceOriginRequestLambdaOutput
              OutputArtifacts:
                - Name: BuildOriginRequestLambdaOutput
            - Name: BuildOriginResponseLambda
              RunOrder: 2
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName: !Ref CodeBuildLambda
              InputArtifacts:
                - Name: SourceOriginResponseLambdaOutput
              OutputArtifacts:
                - Name: BuildOriginResponseLambdaOutput
        - Name: LambdaEdgeDeploy
          Actions:
            - Name: CreateUpdateLambdaEdge
              RunOrder: 3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: 1
              Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: CAPABILITY_IAM
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Sub '${ProjectName}-lambda-edge'
                TemplatePath: SourceOriginRequestLambdaOutput::cloudformation/lambda-edge.yml
                ParameterOverrides: !Sub |
                  {
                    "ProjectName": "${ProjectName}",
                    "OriginRequestDeploymentPackageKey": {"Fn::GetArtifactAtt": ["BuildOriginRequestLambdaOutput", "ObjectKey"]},
                    "OriginRequestLambdaCodeBucket": "${PipelineBucket}",
                    "OriginResponseDeploymentPackageKey": {"Fn::GetArtifactAtt": ["BuildOriginResponseLambdaOutput", "ObjectKey"]},
                    "OriginResponseLambdaCodeBucket": "${PipelineBucket}",
                    "Nonce": {"Fn::GetParam":["BuildOriginResponseLambdaOutput","random.json","randomnumber"]}
                  }
              InputArtifacts:
                - Name: BuildOriginRequestLambdaOutput
                - Name: BuildOriginResponseLambdaOutput

  # NOTE - Liam Raven - 25/11/2020 - You can also add a codepipeline here to CI/CD the cloudfront template

Outputs:
  LambdaEdgePipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${LambdaEdgePipeline}
    Description: CodePipeline URL