AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda@edge CI/CD - Liam Raven - 25/11/2020

Parameters:
  ProjectName:
    Description: IMPORTANT! Must be consistent throughout all cloudformation deployments. eg. waterproofjack
    Type: String
  OriginRequestDeploymentPackageKey:
    Type: String
  OriginRequestLambdaCodeBucket:
    Type: String
  OriginResponseDeploymentPackageKey:
    Type: String
  OriginResponseLambdaCodeBucket:
    Type: String
  Nonce:
    Type: String

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - "lambda.amazonaws.com"
            - "edgelambda.amazonaws.com"
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub '${ProjectName}-LambdaEdgePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - xray:PutTraceSegments
                - xray:PutTelemetryRecords
                - xray:GetSamplingRules
                - xray:GetSamplingTargets
                - xray:GetSamplingStatisticSummaries
                Resource: "*"
                Effect: Allow
              - Action:
                - lambda:*
                Resource: "*"
                Effect: Allow
              - Action:
                - s3:*
                Resource: [!Join [ '', ['arn:aws:s3:::', !Ref OriginRequestLambdaCodeBucket]], !Join [ '', ['arn:aws:s3:::', !Ref OriginRequestLambdaCodeBucket, '/*']], !Join [ '', ['arn:aws:s3:::', !Ref OriginResponseLambdaCodeBucket]], !Join [ '', ['arn:aws:s3:::', !Ref OriginResponseLambdaCodeBucket, '/*']]]
                Effect: Allow
              - Action:
                - logs:*
                Resource: "arn:aws:logs:*:*:*"
                Effect: Allow

  PublishLambdaVersionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: PublishVersion
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:PublishVersion
            Resource: '*'

  LambdaEdgeOriginRequestFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      FunctionName: !Sub '${ProjectName}-lambda-edge-origin-request'
      Role: !GetAtt LambdaRole.Arn
      Handler: handler.handler
      Runtime: nodejs12.x
      Timeout: 5
      Code:
        S3Bucket: !Ref OriginRequestLambdaCodeBucket
        S3Key: !Ref OriginRequestDeploymentPackageKey

  LambdaEdgeOriginRequestVersion:
    Type: Custom::LatestLambdaVersion
    Properties:
      ServiceToken: !GetAtt PublishLambdaVersion.Arn
      FunctionName: !Ref LambdaEdgeOriginRequestFunction
      Nonce: !Ref Nonce

  LambdaEdgeOriginResponseFunction:
    Type: AWS::Lambda::Function
    DependsOn: LambdaRole
    Properties:
      FunctionName: !Sub '${ProjectName}-lambda-edge-origin-response'
      Role: !GetAtt LambdaRole.Arn
      Handler: handler.handler
      Runtime: nodejs12.x
      Timeout: 5
      Code:
        S3Bucket: !Ref OriginResponseLambdaCodeBucket
        S3Key: !Ref OriginResponseDeploymentPackageKey

  LambdaEdgeOriginResponseVersion:
    Type: Custom::LatestLambdaVersion
    Properties:
      ServiceToken: !GetAtt PublishLambdaVersion.Arn
      FunctionName: !Ref LambdaEdgeOriginResponseFunction
      Nonce: !Ref Nonce

  PublishLambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs12.x
      Role: !GetAtt PublishLambdaVersionRole.Arn
      Code:
        ZipFile: |
          const {Lambda} = require('aws-sdk')
          const {send, SUCCESS, FAILED} = require('cfn-response')
          const lambda = new Lambda()
          exports.handler = (event, context) => {
            const {RequestType, ResourceProperties: {FunctionName}} = event
            if (RequestType == 'Delete') return send(event, context, SUCCESS)
            lambda.publishVersion({FunctionName}, (err, {FunctionArn}) => {
              err
                ? send(event, context, FAILED, err)
                : send(event, context, SUCCESS, {FunctionArn})
            })
          }

Outputs:
  VersionedOriginRequestLambdaArn:
    Value: !GetAtt LambdaEdgeOriginRequestVersion.FunctionArn
    Description: Lambda@edge origin request ARN with Version
    Export:
      Name: !Sub "${ProjectName}-origin-request-lambda-arn"
  VersionedOriginResponseLambdaArn:
    Value: !GetAtt LambdaEdgeOriginResponseVersion.FunctionArn
    Description: Lambda@edge origin response ARN with Version
    Export:
      Name: !Sub "${ProjectName}-origin-response-lambda-arn"